name: CI/CD pipeline for MSSQL Server using GitHub Actions
on:
  push:
    branches: [ main ]
env:
  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  DB_ENDPOINT: ${{ secrets.DB_ENDPOINT }}

jobs:
  BuildDacpac:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3.3.0
      
      - name: Build Database project
        run: |
          dotnet build --configuration Release /p:NetCoreBuild=true

      - name: Zip the deployment package
        shell: powershell
        run: Compress-Archive -Path "D:\a\sql-server-cicd-demo\sql-server-cicd-demo\" -DestinationPath "D:\a\sql-server-cicd-demo\sql-server-cicd-demo\sql-server-db.zip"
      
      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
           
      - name: Publish the artifacts to S3
        shell: cmd
        run: |
          aws s3 cp D:\a\sql-server-cicd-demo\sql-server-cicd-demo\sql-server-db.zip s3://${{ env.AWS_BUCKET_NAME }}/sql-server-cicd/

# Deploy dacpac job
  DeployDACPACToTargetServer:
    needs: BuildDacpac
    runs-on: [ self-hosted, Windows, X64, db-cicd-demo ]
    steps:  
      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: To print the deploy job server IP
        shell: powershell
        run: |
          $privateIp = $null
          $publicIp = $null
          if ($privateIp -eq $null) {
            try {
                $privateIp = Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/local-ipv4" -ErrorAction Stop
                echo "The deploy job server IP (private) is $privateIp"
            } catch {
                $errorMessage = $_.Exception.Message
                echo "Error: $errorMessage"
            }
          } elseif ($publicIp -eq $null) {
              try {
                  $publicIp = Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/public-ipv4" -ErrorAction Stop
                  echo "The deploy job server IP (public) is $publicIp"
              } catch {
                  $errorMessage = $_.Exception.Message
                  echo "Error: $errorMessage"
              }
          } else {
              $errorMessage = $_.Exception.Message
              echo "Error: $errorMessage"
          }
      
      - name: Download the zip file from S3 to EC2 folder
        shell: powershell
        run: |
          C:\"Program Files"\Amazon\AWSCLIV2\aws s3 cp s3://${{ env.AWS_BUCKET_NAME }}/sql-server-cicd/sql-server-db.zip "C:\db-cicd-demo\db-cicd-demo\"
      
      - name: Unzipping the Zip file
        shell: powershell
        run: Expand-Archive -Path "C:\db-cicd-demo\db-cicd-demo\sql-server-db.zip" -DestinationPath "C:\db-cicd-demo\db-cicd-demo\sql-server-cicd-db" -Force
      
      - name: get sqlpackage version
        working-directory: C:\Program Files\Microsoft SQL Server\160\DAC\bin\
        run: ./SqlPackage /version
      
      - name: Deploy .dacpac to Target Server for creating migrations
        shell: powershell
        env:
          TARGET_SERVER_USERNAME: ${{ secrets.TARGET_SERVER_USERNAME }}
          TARGET_SERVER_PASSWORD: ${{ secrets.TARGET_SERVER_PASSWORD }}
          SOURCE_FILE_PATH: ${{ vars.SOURCE_FILE_PATH }}
          TARGET_SERVER_NAME: ${{ secrets.TARGET_SERVER_NAME }}
          TARGET_SERVER_PORT: ${{ vars.TARGET_SERVER_PORT }}
        run: |
          & "C:\Program Files\Microsoft SQL Server\160\DAC\bin\SqlPackage.exe" /a:Publish /tsn:"${{ env.TARGET_SERVER_NAME }},${{ env.TARGET_SERVER_PORT }}" /tdn:"bank" /tu:"${{ env.TARGET_SERVER_USERNAME }}" /tp:"${{ env.TARGET_SERVER_PASSWORD }}" /sf:"${{ env.SOURCE_FILE_PATH }}" /p:VerifyDeployment=False
        